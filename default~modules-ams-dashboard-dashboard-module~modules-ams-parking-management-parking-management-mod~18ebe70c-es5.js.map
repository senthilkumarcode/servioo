{"version":3,"sources":["webpack:///src/app/modules/ams/parking-management/components/parking-management-reports/parking-management-report-data/parking-management-report-data.component.html","webpack:///src/app/modules/ams/parking-management/components/parking-management-reports/parking-management-report-data/parking-management-report-data.component.scss","webpack:///src/app/modules/ams/parking-management/components/parking-management-reports/parking-management-report-data/parking-management-report-data.component.ts"],"names":["ParkingManagementReportDataComponent","route","apartmentService","parkingService","sharedService","sessionService","pageName","isDataLoaded","blockId","blockNo","end_date","start_date","visitTypeId","reportData","isReportSubmitted","filterSelected","singleBlock","allLink","window","innerWidth","event","datagrid","exportdata","matDrawer","close","date","add","timeZone","offset","format","params","ApartmentID","parseInt","apartmentId","ApartmentBlockID","StartDate","getDate","EndDate","getDetails","serviceName","name_","name","getReportsForParkingSlotsMultiFilter","getReportsForParkingSlotsUnAssignedMultiFilter","subscribe","res","errorMessage","reportsDataList","totalItems","length","gridSourceData","localdata","datatype","listData","jqx","dataAdapter","error","val","filtergroup","filter","filter_or_operator","filtervalue","filtercondition","filterData","createfilter","operator","addfilter","showfiltercolumnbackground","columnData","forEach","item","datafield","applyfilters","clearfilters","form","reset","apartmentBlockId","lookupValueId","goBack","myForm","subtract","startOf","timezonecast","title","undefined","link","unitBlockParams","getApartmentBlockByApartmentId","unitBlocksData","visitParams","ApartmentId","LookupTypeId","cellsrenderer","row","column","value","columnrenderer","text","minwidth","renderer","maxwidth","fromDate","endOf","time","toDate","block","apartmentBlockNumber","selector","template"],"mappings":"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","file":"default~modules-ams-dashboard-dashboard-module~modules-ams-parking-management-parking-management-mod~18ebe70c-es5.js","sourcesContent":["export default \"<div class=\\\"user-report-data-wrapper content-layout right-sidebar-fullheight-basic-inner-scroll\\\">\\n\\t<mat-drawer-container class=\\\"example-container\\\" [hasBackdrop]=\\\"true\\\" #matDrawer>\\n\\t\\t<mat-drawer class=\\\"col-lg-3 col-md-3 col-sm-3 col-xs-3 p-0\\\" #filter mode=\\\"over\\\" position=\\\"end\\\">\\n\\t\\t\\t<div class=\\\"helpdesk-filter-drawer p-5\\\">\\n\\t\\t\\t\\t<div class=\\\"title row\\\">\\n\\t\\t\\t\\t\\t<h4> Filter By </h4>\\n\\t\\t\\t\\t\\t<div class=\\\"ml-auto\\\">\\n\\t\\t\\t\\t\\t\\t<button mat-icon-button (click)=\\\"goBack()\\\">\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon [svgIcon]=\\\"'close'\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<condo-card>\\n\\t\\t\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t<form #f=\\\"ngForm\\\">\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"filter-box cleafix\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"d-flex align-items-center mb-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button class=\\\"mr-3\\\" [ngClass]=\\\"filterSelected == 'all' ? 'mat-primary' : 'mat-lined'\\\" (click)=\\\"getAllBlockData('all')\\\">All\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTowers</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [ngClass]=\\\"filterSelected != 'all' ? 'mat-primary' : 'mat-lined'\\\" [matMenuTriggerFor]=\\\"singleBlockActions\\\">{{singleBlock}}</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-menu class=\\\"mat-actions-menu\\\" [xPosition]=\\\"'before'\\\" #singleBlockActions=\\\"matMenu\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<ng-container *ngFor=\\\"let block of unitBlocksData\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-menu-item (click)=\\\"getSingleBlock(block)\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{{block.apartmentBlockNumber}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</ng-container>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-menu>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\t\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t<!-- <div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<condo-select labelText=\\\"Tower No\\\" fieldPlaceholder=\\\"Select Tower\\\" [fieldRequired]=\\\"'required'\\\" [fieldList]=\\\"unitBlocksData\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t fieldValue=\\\"apartmentBlockNumber\\\" [fieldModel]=\\\"blockId\\\" fieldId=\\\"apartmentBlockId\\\" (fieldParams)=\\\"getSelectedBlock($event)\\\"></condo-select>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t</div> -->\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<app-datepicker\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"Start Date\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldName=\\\"startDate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"date\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"start_date\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getStartDate($event)\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</app-datepicker>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<app-datepicker\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlabelText=\\\"End Date\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldName=\\\"endDate\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldRequired]=\\\"'required'\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"date\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[fieldModel]=\\\"end_date\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(fieldParams)=\\\"getEndDate($event)\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</app-datepicker>\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-sm-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"text-right mt-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'primary'\\\" (click)=\\\"filterApply()\\\">Apply</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<button mat-button (click)=\\\"clearFilter()\\\">Cancel</button>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\n\\t\\t\\t\\t\\t\\t</form>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</condo-card>\\n\\t\\t\\t\\n\\t\\t\\t</div>\\n\\t\\t</mat-drawer>\\n\\t\\t<mat-drawer-content>\\n\\t\\t\\t<div class=\\\"main\\\">\\n\\t\\n\\t<ng-container>\\n\\t\\t<app-loader *ngIf=\\\"!isDataLoaded\\\"></app-loader>\\n\\n\\t\\t\\n\\t\\n\\n\\t\\t<condo-card *ngIf=\\\"isDataLoaded\\\">\\n\\t\\t\\t<div CondoCardHeader>\\n\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"float-right\\\" *ngIf=\\\"!allLink\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a href=\\\"javascript:void(0)\\\" routerLink=\\\"/ams/moveinout-tracker/reports\\\" \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\trouterLinkActive=\\\"active\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t[routerLinkActiveOptions] = \\\"{exact:true}\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mr-2 ml-3\\\" svgIcon=\\\"heroicons_outline:document-report\\\"></mat-icon>All Reports\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"d-flex\\\">\\n\\t\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t\\t\\t<h5>{{pageName}}</h5>\\n\\t\\t\\t\\t\\t\\t<p>{{totalItems}} results</p>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"ml-auto  my-auto\\\">\\n\\t\\t\\t\\t\\t\\t\\t<app-table-search [input]=\\\"reportData\\\" (outputParams)=\\\"onGlSearchFilter($event)\\\"></app-table-search>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"mr-3 my-auto ml-3\\\">\\n\\t\\t\\t\\t\\t\\t<app-print-dropdown (outputParams)=\\\"getPrintParams($event)\\\"></app-print-dropdown>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<div class=\\\"mr-3 my-auto ml-3\\\">\\n\\t\\t\\t\\t\\t\\t<button mat-flat-button [color]=\\\"'accent'\\\" (click)=\\\"filter.toggle()\\\" class=\\\"d-none d-md-block\\\">\\n\\t\\t\\t\\t\\t\\t\\t<mat-icon class=\\\"mr-2\\\" svgIcon=\\\"heroicons_outline:filter\\\"></mat-icon>Filter\\n\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t<button class=\\\"d-block d-md-none table-add-btn\\\" mat-button (click)=\\\"filter.toggle()\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<mat-icon [svgIcon]=\\\"'heroicons_outline:filter'\\\"></mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t  </button>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div CondoCardBody>\\n\\t\\t\\t\\t<jqxGrid [theme]=\\\"'material'\\\" [width]=\\\"'100%'\\\" [rowsheight]=\\\"48\\\" [autoheight]=\\\"true\\\" [pageable]=\\\"true\\\"\\n\\t\\t\\t\\t\\t[filterable]=\\\"true\\\" [sortable]=\\\"true\\\" [source]=\\\"listData\\\" [columns]=\\\"columnData\\\"\\n\\t\\t\\t\\t\\t[columnsresize]=\\\"true\\\" [enablehover]=\\\"false\\\" #datagrid>\\n\\t\\t\\t\\t</jqxGrid>\\n\\t\\t\\t</div>\\n\\n\\t\\t</condo-card>\\n\\n\\t</ng-container>\\n</div>\\n</mat-drawer-content>\\n</mat-drawer-container>\\n\\t\\n\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYW1zL3BhcmtpbmctbWFuYWdlbWVudC9jb21wb25lbnRzL3BhcmtpbmctbWFuYWdlbWVudC1yZXBvcnRzL3BhcmtpbmctbWFuYWdlbWVudC1yZXBvcnQtZGF0YS9wYXJraW5nLW1hbmFnZW1lbnQtcmVwb3J0LWRhdGEuY29tcG9uZW50LnNjc3MifQ== */\";","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ApartmentService } from 'src/app/api/controllers/Apartment';\nimport { SharedService } from 'src/app/shared/services/shared.service';\nimport { jqxGridComponent } from 'src/app/shared/jqwidgets-scripts/jqwidgets-ts/angular_jqxgrid';\nimport { MoveInOutService } from 'src/app/api/controllers/MoveInOut';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { SessionService } from 'src/app/core/session/session.service';\n\nimport * as _ from 'underscore';\nimport * as moment from 'moment';\nimport _moment from \"moment-timezone\";\nimport { NgForm } from '@angular/forms';\nimport { ParkingService } from '../../../../../../api/controllers/Parking';\n\n@Component({\n  selector: 'app-parking-management-report-data',\n  templateUrl: './parking-management-report-data.component.html',\n  styleUrls: ['./parking-management-report-data.component.scss']\n})\nexport class ParkingManagementReportDataComponent implements OnInit {\n\n\tpageName: string = \"\";\n    reportsDataList: any;\n    visitorReportData: any;\n    totalItems: any;\n    isDataLoaded: boolean = false;\n    unitBlocksData: any;\n    blockId = null;\n    blockNo: string = \"\";\n    end_date = null;\n    start_date = null;\n    visitByData: any;\n    visitTypeId = null;\n    listData: any;\n    columnData:any;\n    gridSourceData:any;\n    reportData:any = \"\";\n    isReportSubmitted:boolean = false;\n    @ViewChild('datagrid', { static: false }) datagrid: jqxGridComponent;\n    @ViewChild('matDrawer', {static: true}) matDrawer: MatDrawer;\n\n    filterSelected:string = \"all\";\n\t  singleBlock:string = \"Select Tower\";\n    selectedBlockId:number;\n    \n    timeZone:any;\n\n    fromDate:any;\n    toDate:any;\n    @ViewChild('f') myForm: NgForm;\n\n    allLink: boolean = false;\n    \n    constructor(\n        private route: ActivatedRoute, \n        private apartmentService: ApartmentService,\n        private parkingService: ParkingService, \n        private sharedService: SharedService, \n        private sessionService: SessionService) \n        { }\n    \n    \n    isMobileView() {\n        return window.innerWidth <= 767 ? 'table-responsive' : '';\n    }\n\n    getPrintParams(event){\n        this.datagrid.exportdata(event, 'ParkingManagementReportData');\n      }\n    \n      goBack() {\n        this.matDrawer.close();\n      }\n    \n    getDate(date) {\n        return moment(date).add(this.timeZone.offset, 'hours').format(this.timeZone.date);\n    }\n\n    getStartDate(event) {\n      this.start_date = event\n    }\n\n    getEndDate(event) {\n      this.end_date = event\n    }\n    \n    submitReportsFilterForm() {\n        let params = {\n            ApartmentID : parseInt(this.sessionService.apartmentId),\n            ApartmentBlockID : parseInt(this.blockId),\n            StartDate : this.getDate(this.start_date),\n\t\t\t      EndDate : this.getDate(this.end_date)\n\t\t    }\n        this.getDetails(params);\n    }\n\n    getDetails(params){    \n        let serviceName;\n\t\t// let id = parseInt(this.route.params['value'].id);\n\t\tlet name_ = this.route.params['value'].name;\n        if(name_ == \"List of Parking Slots\"){\n            serviceName = this.parkingService.getReportsForParkingSlotsMultiFilter(params)\n        }else if(name_ == \"List of Unassigned Parking Slots\"){\n            serviceName = this.parkingService.getReportsForParkingSlotsUnAssignedMultiFilter(params)\n        }\n        serviceName.subscribe((res:any) => {\n            if(res.errorMessage){\n\t\t\tthis.reportsDataList = [];\n\t\t\tthis.totalItems =  this.reportsDataList.length;\n             \n          }else{\n            this.reportsDataList = res;\n            this.totalItems =  this.reportsDataList.length;     \n           this.gridSourceData = {\n            localdata: this.reportsDataList,\n            datatype: \"array\"\n          }\n        \n          this.listData = new jqx.dataAdapter(this.gridSourceData);\n          this.isReportSubmitted = true;\n          this.isDataLoaded = true;\n          }},\n          error => {\n\n            this.isReportSubmitted = true;\n          this.isDataLoaded = true;\n                });\n    \n    }\n\n    getExpectedDate(val){\n        if(val != ''){\n          return moment(val).format(\"MM/DD/YYYY\")\n        }else{\n          return ''\n        }\n      }\n\n      onGlSearchFilter(event) {\n        if(event != \"\"){\n      \n          let filtergroup = new jqx.filter();\n          let filter_or_operator = 1;\n          let filtervalue = event;\n          let filtercondition = 'contains';\n          let filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n          filtergroup.operator = 'or';\n          filtergroup.addfilter(filter_or_operator, filterData);\n        \n          this.datagrid.showfiltercolumnbackground(false);\n        \n          this.columnData.forEach(item => {\n            if(item.datafield != 'Actions') {\n            this.datagrid.addfilter(item.datafield, filtergroup, true);\n            }\n          })\n        \n          this.datagrid.applyfilters();\n          \n          }\n          else {\n          this.datagrid.clearfilters();\n          }\n         }\n\n    \n      cancel(form){\n          form.reset();\n     }\n\n   \n\n      getSelectedBlock(event) {\n        this.blockId = event[0].apartmentBlockId;\n      }\n\n      getSelectedVisit(event) {\n        this.visitTypeId = event[0].lookupValueId;\n      }\n    \n      filterApply() {\n        this.goBack();\n        this.isDataLoaded = false;\n        let params = {\n            ApartmentID : parseInt(this.sessionService.apartmentId),\n            ApartmentBlockID : parseInt(this.blockId),\n            StartDate : this.getDate(this.start_date),\n\t\t\t      EndDate : this.getDate(this.end_date)\n\t\t    }\n        this.getDetails(params);\n        \n      }\n    \n      clearFilter() {\n        \n        this.myForm.form.reset();\n        this.blockId = null;\n     this.start_date = null;\n     this.end_date = null;\n     this.datagrid.clearfilters();\n     \n        // =this.getTicketByAdmin();\n        let params = {\n            ApartmentID : parseInt(this.sessionService.apartmentId),\n            ApartmentBlockID : parseInt(this.blockId),\n            StartDate : this.start_date === null ? moment().subtract(5,'months').startOf('month').add(this.timeZone.offset, 'hours').format(this.timeZone.date) : this.getDate(this.start_date),\n        EndDate : this.end_date === null ? moment().add(this.timeZone.offset, 'hours').format(this.timeZone.date) : this.getDate(this.end_date)\n\t\t    }\n        this.getDetails(params);\n        this.goBack();\n      }\n    \n    ngOnInit() {\n\n      this.sharedService.timezonecast.subscribe( timeZone => this.timeZone = timeZone )\n\n        this.pageName = this.route.params['value'].title === undefined ? this.route.params['value'].name : this.route.params['value'].title;\n        this.allLink = this.route.params['value'].link;\n        let unitBlockParams = {\n            apartmentId: parseInt(this.sessionService.apartmentId)\n        };\n        this.apartmentService.getApartmentBlockByApartmentId(unitBlockParams).subscribe((res: any) => {\n            this.unitBlocksData = res;\n        });\n        let visitParams = {\n            ApartmentId: this.sessionService.apartmentId,\n            LookupTypeId: 15\n        }\n        \n        this.isDataLoaded = false;\n\n        var cellsrenderer = (row, column, value) => {\n            return '<div class=\"jqx-custom-inner-cell\">' + value + '</div>';\n          }\n      \n          var columnrenderer = (value) => {\n            return '<div style=\"padding: 14px\">' + value + '</div>';\n          }\n      \n      \n          this.columnData = [{\n            text: 'Tower No',\n            datafield: 'blockNo',\n            cellsrenderer: cellsrenderer,\n            minwidth: 100,\n            renderer: columnrenderer\n        },{\n                text: 'Unit No',\n                datafield: 'unitNo',\n                minwidth: 80,\n                cellsrenderer: cellsrenderer,\n                renderer: columnrenderer\n            },  {\n               text: 'Slot Name',\n               datafield: 'slotName',\n               cellsrenderer: cellsrenderer,\n               minwidth: 130,\n               renderer: columnrenderer\n           }, {\n               text: 'Slot Type',\n               datafield: 'slotType',\n               cellsrenderer: cellsrenderer,\n               minwidth: 220,\n               maxwidth: 250,\n               renderer: columnrenderer\n\t\t\t},{\n\t\t\t\ttext: 'Vehicle Type',\n\t\t\t\tdatafield: 'vehicleType',\n\t\t\t\tcellsrenderer: cellsrenderer,\n                minwidth: 130,\n                maxwidth: 150,\n\t\t\t\trenderer: columnrenderer \n\t\t\t}, {\n                text: 'UnAssigned Since',\n                datafield: 'unAssignedSince',\n                cellsrenderer: cellsrenderer,\n                minwidth: 160,\n                maxwidth: 180,\n                renderer: columnrenderer \n            }, {\n                text: 'Sq. Feet',\n                datafield: 'sqFeet',\n                cellsrenderer: cellsrenderer,\n                minwidth: 120,\n                maxwidth: 150,\n                renderer: columnrenderer \n            }];\n   \n     this.fromDate =  moment().subtract(12,'months').endOf('month').format(this.timeZone.time);\n     this.toDate = moment().format(this.timeZone.time);\n\n     let params = {\n        ApartmentID : parseInt(this.sessionService.apartmentId),\n        ApartmentBlockID : parseInt(this.blockId)\n    }\n    this.getDetails(params);\n\n    }\n\n    getAllBlockData(){\n\n\t  this.filterSelected = 'all';\n\t  this.singleBlock = \"Select Tower\";\n\t  \n\t  this.blockId = \"\";\n\t  this.datagrid.clearfilters();\n  \n\t}\n\n\tgetSingleBlock(block){\n  \t\n\t\tthis.filterSelected = 'single';\n\t\tthis.singleBlock = block.apartmentBlockNumber;\n\t\tthis.blockId = block.apartmentBlockId;\n\n\t\tlet filtergroup = new jqx.filter();\n\t\t\tlet filter_or_operator = 1;\n\t\t\tlet filtervalue = this.singleBlock;\n\t\t\tlet filtercondition = 'contains';\n\t\t\tlet filterData = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n\t\t\tfiltergroup.operator = 'or';\n\t\t\tfiltergroup.addfilter(filter_or_operator, filterData);\n\t  \n\t\t\tthis.datagrid.showfiltercolumnbackground(false);\n\t  \n\t\t\tthis.columnData.forEach(item => {\n\t\t\t  if(item.datafield != 'Actions') {\n\t\t\t\tthis.datagrid.addfilter(item.datafield, filtergroup, true);\n\t\t\t  }\n\t\t\t})\n\t  \n\t\t\tthis.datagrid.applyfilters();\n\t}\n}\n"]}